version: '3'

services:
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - zookeeper:/data
      - zookeeper:/datalog

  kafka:
    image: confluentinc/cp-kafka:5.3.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_SEGMENT_BYTES: 16777216
      KAFKA_LOG_RETENTION_BYTES: 134217728
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 2
    volumes:
      - kafka:/var/lib/kafka/data
      - ./spark-jobs:/home/spark-jobs
    depends_on:
      - zookeeper

  producer:
    build: ./producer
    container_name: producer
    environment: 
      KAFKA_BROKER: "kafka:19092"
    depends_on: 
      - kafka

  hadoop-namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-namenode
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=hadoop
    env_file:
      - ./configs/hadoop.env
    ports:
      - 9870:9870
      - 9000:9000

  hadoop-datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-datanode
    depends_on: 
      - hadoop-namenode
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    env_file:
      - ./configs/hadoop.env

  spark-master:
    image: bde2020/spark-master:3.0.1-hadoop3.2
    container_name: spark-master
    ports:
      - 8080:8080
      - 7077:7077
    environment: 
      - PYSPARK_PYTHON=python3
    env_file:
      - ./configs/hadoop.env
    volumes: 
      - ./spark-jobs:/home/spark-jobs

  spark-worker:
    image: bde2020/spark-worker:3.0.1-hadoop3.2
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    ports:
      - 8081:8081
    env_file:
      - ./configs/hadoop.env

  postgres:
    image: postgres:9.6
    container_name: postgres
    volumes: 
        - ./docker-airflow/pg-init-scripts:/docker-entrypoint-initdb.d
    environment:
        - POSTGRES_USER=airflow
        - POSTGRES_PASSWORD=airflow
        - POSTGRES_DB=airflow
    ports:
        - "5432:5432"

  airflow:
    image: docker-airflow-spark:1.10.7_3.0.1
    container_name: airflow
    user: root
    depends_on:
      - spark-master
      - postgres
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - FERNET_KEY=wKU4DB8b8jfpqIqcTSGSyR6dWtCtF16PUVAOlviItYw=
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-namenode:9000
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./dags:/root/airflow/dags #DAG folder
      - ./spark-jobs:/usr/local/spark/app #Spark Scripts (Must be the same path in airflow and Spark Cluster)
      - ./spark-jobs/resources:/usr/local/spark/resources #Resources folder (Must be the same path in airflow and Spark Cluster)
    ports:
      - "8282:8080"
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3

  hue:
    image: gethue/hue:20201202-135001
    hostname: hue
    container_name: hue
    dns: 8.8.8.8
    ports:
      - "8888:8888"
    volumes:
      - ./configs/conf.dist:/usr/share/hue/desktop/conf
    depends_on: 
      - hadoop-namenode

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=asvsp
      - MONGO_INITDB_ROOT_PASSWORD=asvsp
      - MONGO_INITDB_DATABASE=asvsp

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8085:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=asvsp
      - ME_CONFIG_MONGODB_ADMINPASSWORD=asvsp
    depends_on:
      - mongo

  metabase-app:
    image: metabase/metabase
    container_name: metabase-app
    restart: always
    ports:
      - 3001:3000
    volumes:
      - /metabase-data:/metabase-data
    depends_on:
      - mongo
    links:
      - mongo

volumes:
  zookeeper:
  kafka:
  hadoop_namenode:
  hadoop_datanode:
